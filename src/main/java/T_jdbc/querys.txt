[Aulas anteriores criamos as tabelas/schemas]:

CREATE DATABASE db_anime_store;
USE db_anime_store;

# Criando as tabelas que não possuem relacionamentos primeiro:
CREATE TABLE IF NOT EXISTS `db_anime_store`.`tbl_producer`(
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL,
    PRIMARY KEY (`id`)
);

# Criando a tabela anime que faz referência ao producer:
CREATE TABLE IF NOT EXISTS `db_anime_store`.`tbl_anime`(
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL,
    `episodes` INT NOT NULL,
    `producer_id` INT NOT NULL,
    PRIMARY KEY (`id`),
    INDEX `idx_producer_id` (`producer_id` ASC) VISIBLE,
        CONSTRAINT `producer_id`
        FOREIGN KEY (`producer_id`) REFERENCES `db_anime_store`.`tbl_producer`(`id`)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION
);


-------------------------------------------------------------------------------
[Aula257 - Inserindo dados iniciais com Statement]:

---> ProducerRepository:
- public static void save(Producer producer): Obs: Primeiro teste não utilizamos o producer do parâmetro.

    INSERT INTO `db_anime_store`.`tbl_producer` (`id`, `name`)
    VALUES (1, 'Mad House'),
           (2, 'Studio Ghibli');

    - Testando se ocorreu tudo bem:
        $ docker exec -it e7dd05585b51 bash
        $ mysql -uroot -p
        $ select * from tbl_producer;

        - Output 01:
            +----+---------------+
            | id | name          |
            +----+---------------+
            |  1 | Mad House     |
            |  2 | Studio Ghibli |
            +----+---------------+
            2 rows in set (0.01 sec)


    "INSERT INTO `db_anime_store`.`tbl_producer` (`name`)
    VALUES ('%s');".formatted(producer.getName());

    - Testando se ocorreu tudo bem:
        $ docker exec -it e7dd05585b51 bash
        $ mysql -uroot -p
        $ select * from tbl_producer;

        - Output 02:
            +----+---------------+
            | id | name          |
            +----+---------------+
            |  1 | Mad House     |
            |  2 | Studio Ghibli |
            |  3 | NHK           |
            +----+---------------+
            3 rows in set (0.01 sec)


-------------------------------------------------------------------------------
[Aula259 - Deletando registros/records com Statement]: Delete Where

---> ProducerRepository:
- public static void delete(int id):

    DELETE FROM `db_anime_store`.`tbl_producer`
    WHERE `id` = ?;

-------------------------------------------------------------------------------
[Aula260 - Atualizando registros/records com Statement]: Update Where

---> ProducerRepository:
- public static void update(Producer producer):

    UPDATE `db_anime_store`.`tbl_producer`
    SET name` = '?'
    WHERE (`id` = ?);


-------------------------------------------------------------------------------
[Aula261 - Buscando TODOS producers com ResultSet]: Select * from

---> ProducerRepository:
- public static List<Producer> findAll():

    SELECT * FROM `db_anime_store`.`tbl_producer`;

-------------------------------------------------------------------------------
[Aula262 - findByName producers com ResultSet]: Select where like

---> ProducerRepository:
- public static List<Producer> findByName(String name):

    SELECT `id`, `name` FROM `db_anime_store`.`tbl_producer`
    WHERE `name` LIKE %?%;

-------------------------------------------------------------------------------
[Aula270 - CallableStatement utilizado quando queremos executar Procedures e Functions]: Select where like

CallableStatement: Utilizada quando queremos executar Storage Procedures e Functions no DB

	- Functions obrigatóriamente possuem retorno;
	- Storage Procedures podem ter ou não ter;
    USE db_anime_store;
    DELIMITER $$
    CREATE PROCEDURE sp_get_producer_by_name_usingLike(param_name varchar(100))
    BEGIN
    SELECT * FROM `db_anime_store`.`tbl_producer` AS p WHERE p.name LIKE '%param_name%';
    END$$
    DELIMITER ;

    CALL `db_anime_store`.`sp_get_producer_by_name_usingLike`("STUDIO"); // -> esse cara que a gente chama no Java,
    // Ou seja, precisamos primeiro criar a procedure no DB pra depois chamar no Java!


---> ProducerRepository:
- public static List<Producer> findByNameCallableStatement(String name):
    ...
    String query = "CALL sp_get_producer_by_name_usingLike("?");"